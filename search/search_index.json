{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The SCC Compiler","text":"<p>A compiler for Golang targeting Aarch64, written in OCaml. See below for an example of OCaml.</p> <pre><code>let () = print_endline \"Hello, World!\n</code></pre>"},{"location":"#scc-an-architectural-overview","title":"SCC - An Architectural Overview","text":"<p>SCC is broken down into three blocks: a front end, middle end, and back end.</p>"},{"location":"#the-front-end","title":"The Front End","text":"<p>The front end converts source code into an intermediate representation.</p>"},{"location":"#the-middle-end","title":"The Middle End","text":"<p>The middle end operates on IR, performing platform-agnostic optimisations such as dead code elimination, function inlining, etc.</p>"},{"location":"#the-back-end","title":"The Back End","text":"<p>The back end consumes the optimised IR and generates machine code.</p>"}]}